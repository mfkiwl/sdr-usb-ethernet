#!/usr/bin/python

# observe (low freq) (high freq)

import argparse
import os.path
import sys
import subprocess

parser = argparse.ArgumentParser(description='Display spectrum with gnuplot.')
parser.add_argument('input', help='Input file')
parser.add_argument('lo', type=float, help='Start or mid frequency (MHz).')
parser.add_argument('hi', type=float, help='End or half-width frequency (MHz).')
# Twice bandwidth assuming zero based:
parser.add_argument('-f', '--freq', type=float, default=250.0,
                    help='Sample frequency (MHz).')
parser.add_argument('-b', '--base', type=float, help='Low cut-off for display.')
parser.add_argument('-W', '--width', type=int, default=1800,
                    help='Output width.')
parser.add_argument('-H', '--height', type=int, default=400,
                    help='Output height.')
parser.add_argument('-o', '--output',
                    help='Output PNG file instead of displaying.')
parser.add_argument('-v', '--verbose', help='Print GNU plot commands.',
                    action='store_true')

args = parser.parse_args()

f_lo = args.lo
f_hi = args.hi

file_size = os.path.getsize(args.input)
assert file_size % 4 == 0
samples = file_size / 4

if 0 < f_hi <= f_lo:
    f_lo, f_hi = f_lo - f_hi, f_lo + f_hi

# Remember that we only go to half the frequency...
samples_per_mhz = 2 * samples / args.freq

s_lo = int(f_lo * samples_per_mhz)
s_hi = int(f_hi * samples_per_mhz)

assert s_lo >= 0
assert s_lo < s_hi
assert s_hi <= samples
assert args.width >= 50

shift = 0
while s_hi - s_lo > 2 * args.width:
    shift += 1
    s_hi /= 2
    s_lo /= 2

dx = (1 << shift) / samples_per_mhz
origin = dx * (s_lo + 0.5 - 0.5 / (1<<shift))
title = args.input

# Adjust f_lo, f_hi to the integer values.
f_lo = (s_lo << shift) / samples_per_mhz
f_hi = (s_hi << shift) / samples_per_mhz

if f_hi - f_lo < 0.01:
    adjust = int((f_lo + f_hi) * 0.5 + 0.001)
    origin = (origin - adjust) * 1000
    f_lo = (f_lo - adjust) * 1000
    f_hi = (f_hi - adjust) * 1000
    dx *= 1000
    title = "%s near %i kHz" % (args.input, adjust * 1000)

def make_reduced(base,path,order):
    try:
        if os.path.getmtime(path) > os.path.getmtime(base):
            return
    except OSError, e:
        pass
    try:
        sr = __file__[0:__file__.rindex('/')] + "/spectrum-reduce"
    except:
        sr = "./spectrum-reduce"
    subprocess.check_call([sr, args.input, path, str(shift)])


if shift == 0:
    path = args.input
else:
    path = "%s.%i" % (args.input, shift)
    make_reduced(args.input, path, shift)


c = []

if args.output is None:
    c.append("set term wxt size %i,%i" % (args.width, args.height))
else:
    c.append('set term pngcairo size %i,%i font ",10"'
             % (args.width, args.height))
    c.append('set output "%s"' % args.output)

c.append("set mxtics 10")
if args.base is not None:
    c.append("set yrange [%.17g:*]" % args.base)
c.append("set xrange [%.17g:%.17g]" % (f_lo, f_hi))
#si.write("set log y")
c.append('plot "%s" binary array=(%i) skip=%i origin=(%.17g,0) dx=%.17g using (10*log10($1)-33) title "%s" with lines' % (
        path, s_hi - s_lo, s_lo * 4, origin, dx, title))

if args.verbose:
    print '\n'.join(c)

gnuplot = ['gnuplot']
for x in c:
    gnuplot.append('-e')
    gnuplot.append(x)

subprocess.check_call(gnuplot, stdin=open('/dev/null'))
